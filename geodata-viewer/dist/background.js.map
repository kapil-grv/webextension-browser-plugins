{"version":3,"file":"background.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://geodata-viewer/./src/background.js"],"sourcesContent":["let geoWindowId = null;\n\n// Reset window ID if extension is reloaded\nchrome.runtime.onStartup.addListener(() => {\n    geoWindowId = null;\n});\n\n// Function to create the popup window\nfunction createGeoPopup() {\n    if (geoWindowId !== null) {\n        chrome.windows.update(geoWindowId, { focused: true });\n        return;\n    }\n\n    chrome.system.display.getInfo((displays) => {\n        if (displays.length === 0) return;\n\n        const primaryDisplay = displays[0];\n        const screenWidth = primaryDisplay.workArea.width;\n        const screenHeight = primaryDisplay.workArea.height;\n\n        const width = 800;\n        const height = 600;\n        const left = Math.floor((screenWidth - width) / 2);\n        const top = Math.floor((screenHeight - height) / 2);\n\n        chrome.windows.create(\n            {\n                url: chrome.runtime.getURL(\"popup.html\"),\n                type: \"popup\",\n                width,\n                height,\n                left,\n                top\n            },\n            (window) => {\n                if (window) {\n                    geoWindowId = window.id;\n                }\n            }\n        );\n    });\n}\n\n// Ensure only one `onRemoved` listener is registered\nchrome.windows.onRemoved.addListener((closedWindowId) => {\n    if (closedWindowId === geoWindowId) {\n        geoWindowId = null;\n    }\n});\n\n// Listen for action icon click\nchrome.action.onClicked.addListener(() => {\n    createGeoPopup();\n});\n\n// Listen for messages from `popup.js`\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.type === \"open_popup\") {\n        createGeoPopup(); // Use existing function instead of creating a new window\n\n        sendResponse({ status: \"Popup opened\" });\n        return true; // Keep message port open for async response\n    }\n});\n"],"names":[],"sourceRoot":""}